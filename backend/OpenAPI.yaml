openapi: 3.0.0
info:
  title: Task Management API
  version: 1.0.0
  description: API for managing tasks, users, categories, and priorities.
servers:
  - url: /api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
    Task:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        description: { type: string }
        due_date: { type: string, format: date }
        is_complete: { type: boolean }
        priority: { $ref: '#/components/schemas/Priority' }
        category: { $ref: '#/components/schemas/Category' }
    Category:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
    Priority:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        level: { type: integer }
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
      responses:
        '201': { description: User registered }
        '400': { description: Invalid input }
  /auth/login:
    post:
      summary: Login and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': { description: JWT token }
        '401': { description: Invalid credentials }
  /tasks:
    get:
      summary: List tasks
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: priority
          schema: { type: integer }
        - in: query
          name: due_date
          schema: { type: string, format: date }
        - in: query
          name: is_complete
          schema: { type: boolean }
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Task' }
  /tasks:
    post:
      summary: Create a new task
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, priority_id]
              properties:
                title: { type: string }
                description: { type: string }
                due_date: { type: string, format: date }
                category_id: { type: integer }
                priority_id: { type: integer }
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400': { description: Invalid input }
    patch:
      summary: Update a task
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                due_date: { type: string, format: date }
                category_id: { type: integer }
                priority_id: { type: integer }
                is_complete: { type: boolean }
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400': { description: Invalid input }
        '404': { description: Task not found }
    delete:
      summary: Delete a task
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Task deleted }
        '404': { description: Task not found }
  /tasks/{id}:
    get:
      summary: Get a single task by ID
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404': { description: Task not found }
  /categories:
    get:
      summary: List categories
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Category' }
    post:
      summary: Create a category
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400': { description: Invalid input }
  /categories/{id}:
    patch:
      summary: Update a category
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400': { description: Invalid input }
        '404': { description: Category not found }
    delete:
      summary: Delete a category
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Category deleted }
        '404': { description: Category not found }
  /priorities:
    get:
      summary: List priorities
      responses:
        '200':
          description: List of priorities
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Priority' }